import openapi from "npm:openapi-typescript@6.7.6";

const schema_url = "https://api.revolt.chat/openapi.json";
const jsonschema = await (await fetch(schema_url)).json();

const src = (await openapi(jsonschema, {
  commentHeader: "// this file was autogenerated by scripts/typegen.ts",
})).toString();

Deno.writeTextFileSync(new URL("../src/delta/generated/schema.ts", import.meta.url), src.replace("T extends any", "T extends unknown"));

const path_file_entries = [
  "// this file was autogenerated by scripts/typegen.ts",
  "import type { paths } from './schema.ts';",
  "export type routes = ",
];

const paths = Object.keys(jsonschema.paths);

const query_data = {} as Record<string, unknown[]>;

// deno-lint-ignore no-explicit-any
const path_resolve = {} as Record<number, any>;

for (const path of paths) {
  const data = jsonschema.paths[path];
  const methods = Object.keys(data);
  const template = path.replace(/\{\w+\}/g, "${string}");
  for (const method of methods) {
    const operation = `paths['${path}']['${method}']`;
    const route = data[method];
    const response = Object.keys(route["responses"]).find((x) =>
      x !== "default"
    ) || "default";
    const content_type =
      Object.keys(route["responses"][response]["content"] || {})[0];
    const response_type = response === "204" || !content_type
      ? "undefined"
      : `${operation}['responses']['${response}']['content']['${content_type}']`;
    const query_parameters = [];
    let has_body = false;
    if (route["parameters"]) {
      for (const parameter of route["parameters"]) {
        if (parameter.in === "query") {
          query_parameters.push(parameter.name);
        }
      }
    }
    if (route["requestBody"]?.["content"]?.["application/json"]) {
      has_body = true;
    }
    let parameters = "undefined";
    if (has_body || query_parameters.length > 0) {
      const entries = [];
      if (query_parameters.length > 0) {
        entries.push(`${operation}['parameters']['query']`);
      }
      if (has_body) {
        entries.push(
          `${operation}['requestBody']['content']['application/json']`,
        );
      }
      parameters = entries.join("|");
    }
    const parts = path.split("").filter((x) => x === "/").length;
    path_file_entries.push(
      `| { method: '${method}', path: \`${template}\`, parts: ${parts}, params: ${parameters}, response: ${response_type} }`,
    );
    if (/\{\w+\}/.test(path)) {
      path_file_entries.push(
        `| { method: '${method}', path: '-${path}', parts: ${parts}, params: ${parameters}, response: ${response_type} }`,
      );
    }
    query_data[path] = {
      ...query_data[path],
      [method]: query_parameters,
    };
  }

  const segments = path.split("/");
  segments.shift();
  path_resolve[segments.length] = [
    ...(path_resolve[segments.length] || []),
    segments.map((key) => /\{.*\}/.test(key) ? [key] : key),
  ];
}

Deno.writeTextFileSync(
  new URL("../src/delta/generated/routes.ts", import.meta.url),
  path_file_entries.join("\n") + ";",
);

Deno.writeTextFileSync(
  new URL("../src/delta/generated/params.ts", import.meta.url),
  `// this file was autogenerated by scripts/typegen.ts\nexport const pathResolve = ${
    JSON.stringify(path_resolve)
  };\nexport const queryParams = ${JSON.stringify(query_data)};`,
);

const type_entries = [
  "// this file was autogenerated by scripts/typegen.ts",
  "import type { components } from './schema.ts';",
];

for (const schema of Object.keys(jsonschema.components.schemas)) {
  type_entries.push(`export type ${
    schema.replace(
      /\s/g,
      "_",
    )
  } = components['schemas']['${schema}'];`);
}

Deno.writeTextFileSync(
  new URL("../src/delta/generated/types.ts", import.meta.url),
  type_entries.join("\n"),
);
