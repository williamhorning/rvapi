// autogenerated by @jersey/openapi

/**
 * @description Server Configuration
 */
export interface RevoltConfig {
	/** @description Revolt API Version */
	revolt: string;
	/** @description Features enabled on this Revolt node */
	features: RevoltFeatures;
	/** @description WebSocket URL */
	ws: string;
	/** @description URL pointing to the client serving this node */
	app: string;
	/** @description Web Push VAPID public key */
	vapid: string;
	/** @description Build information */
	build: BuildInformation;
}

/**
 * @description Feature Configuration
 */
export interface RevoltFeatures {
	/** @description hCaptcha configuration */
	captcha: CaptchaFeature;
	/** @description Whether email verification is enabled */
	email: boolean;
	/** @description Whether this server is invite only */
	invite_only: boolean;
	/** @description File server service configuration */
	autumn: Feature;
	/** @description Proxy service configuration */
	january: Feature;
	/** @description Voice server configuration */
	voso: VoiceFeature;
}

/**
 * @description hCaptcha Configuration
 */
export interface CaptchaFeature {
	/** @description Whether captcha is enabled */
	enabled: boolean;
	/** @description Client key used for solving captcha */
	key: string;
}

/**
 * @description Generic Service Configuration
 */
export interface Feature {
	/** @description Whether the service is enabled */
	enabled: boolean;
	/** @description URL pointing to the service */
	url: string;
}

/**
 * @description Voice Server Configuration
 */
export interface VoiceFeature {
	/** @description Whether voice is enabled */
	enabled: boolean;
	/** @description URL pointing to the voice API */
	url: string;
	/** @description URL pointing to the voice WebSocket server */
	ws: string;
}

/**
 * @description Build Information
 */
export interface BuildInformation {
	/** @description Commit Hash */
	commit_sha: string;
	/** @description Commit Timestamp */
	commit_timestamp: string;
	/** @description Git Semver */
	semver: string;
	/** @description Git Origin URL */
	origin_url: string;
	/** @description Build Timestamp */
	timestamp: string;
}

/**
 * @description Error information
 */
export type Error =
	& {
		/** @description Where this error occurred */
		location: string;
	}
	& ({
		type: 'LabelMe';
	} | {
		type: 'AlreadyOnboarded';
	} | {
		type: 'UsernameTaken';
	} | {
		type: 'InvalidUsername';
	} | {
		type: 'DiscriminatorChangeRatelimited';
	} | {
		type: 'UnknownUser';
	} | {
		type: 'AlreadyFriends';
	} | {
		type: 'AlreadySentRequest';
	} | {
		type: 'Blocked';
	} | {
		type: 'BlockedByOther';
	} | {
		type: 'NotFriends';
	} | {
		type: 'TooManyPendingFriendRequests';
		max: number;
	} | {
		type: 'UnknownChannel';
	} | {
		type: 'UnknownAttachment';
	} | {
		type: 'UnknownMessage';
	} | {
		type: 'CannotEditMessage';
	} | {
		type: 'CannotJoinCall';
	} | {
		type: 'TooManyAttachments';
		max: number;
	} | {
		type: 'TooManyEmbeds';
		max: number;
	} | {
		type: 'TooManyReplies';
		max: number;
	} | {
		type: 'TooManyChannels';
		max: number;
	} | {
		type: 'EmptyMessage';
	} | {
		type: 'PayloadTooLarge';
	} | {
		type: 'CannotRemoveYourself';
	} | {
		type: 'GroupTooLarge';
		max: number;
	} | {
		type: 'AlreadyInGroup';
	} | {
		type: 'NotInGroup';
	} | {
		type: 'AlreadyPinned';
	} | {
		type: 'NotPinned';
	} | {
		type: 'UnknownServer';
	} | {
		type: 'InvalidRole';
	} | {
		type: 'Banned';
	} | {
		type: 'TooManyServers';
		max: number;
	} | {
		type: 'TooManyEmoji';
		max: number;
	} | {
		type: 'TooManyRoles';
		max: number;
	} | {
		type: 'AlreadyInServer';
	} | {
		type: 'CannotTimeoutYourself';
	} | {
		type: 'ReachedMaximumBots';
	} | {
		type: 'IsBot';
	} | {
		type: 'IsNotBot';
	} | {
		type: 'BotIsPrivate';
	} | {
		type: 'CannotReportYourself';
	} | {
		type: 'MissingPermission';
		permission: string;
	} | {
		type: 'MissingUserPermission';
		permission: string;
	} | {
		type: 'NotElevated';
	} | {
		type: 'NotPrivileged';
	} | {
		type: 'CannotGiveMissingPermissions';
	} | {
		type: 'NotOwner';
	} | {
		type: 'DatabaseError';
		operation: string;
		collection: string;
	} | {
		type: 'InternalError';
	} | {
		type: 'InvalidOperation';
	} | {
		type: 'InvalidCredentials';
	} | {
		type: 'InvalidProperty';
	} | {
		type: 'InvalidSession';
	} | {
		type: 'InvalidFlagValue';
	} | {
		type: 'NotAuthenticated';
	} | {
		type: 'DuplicateNonce';
	} | {
		type: 'NotFound';
	} | {
		type: 'NoEffect';
	} | {
		type: 'FailedValidation';
		error: string;
	} | {
		type: 'ProxyError';
	} | {
		type: 'FileTooSmall';
	} | {
		type: 'FileTooLarge';
		max: number;
	} | {
		type: 'FileTypeNotAllowed';
	} | {
		type: 'ImageProcessingFailed';
	} | {
		type: 'NoEmbedData';
	} | {
		type: 'VosoUnavailable';
	} | {
		type: 'FeatureDisabled';
		feature: string;
	});

/**
 * @description User
 */
export interface User {
	/** @description Unique Id */
	_id: string;
	/** @description Username */
	username: string;
	/** @description Discriminator */
	discriminator: string;
	/** @description Display name */
	display_name?: string;
	/** @description Avatar attachment */
	avatar?: File;
	/** @description Relationships with other users */
	relations?: (Relationship)[];
	/** @description Bitfield of user badges

https://docs.rs/revolt-models/latest/revolt_models/v0/enum.UserBadges.html */
	badges?: number;
	/** @description User's current status */
	status?: UserStatus;
	/** @description Enum of user flags

https://docs.rs/revolt-models/latest/revolt_models/v0/enum.UserFlags.html */
	flags?: number;
	/** @description Whether this user is privileged */
	privileged?: boolean;
	/** @description Bot information */
	bot?: BotInformation;
	/** @description Current session user's relationship with this user */
	relationship: RelationshipStatus;
	/** @description Whether this user is currently online */
	online: boolean;
}

/**
 * @description File
 */
export interface File {
	/** @description Unique Id */
	_id: string;
	/** @description Tag / bucket this file was uploaded to */
	tag: string;
	/** @description Original filename */
	filename: string;
	/** @description Parsed metadata of this file */
	metadata: Metadata;
	/** @description Raw content type of this file */
	content_type: string;
	/** @description Size of this file (in bytes) */
	size: number;
	/** @description Whether this file was deleted */
	deleted?: boolean;
	/** @description Whether this file was reported */
	reported?: boolean;
	/** @description message_id */
	message_id?: string;
	/** @description user_id */
	user_id?: string;
	/** @description server_id */
	server_id?: string;
	/** @description Id of the object this file is associated with */
	object_id?: string;
}

/**
 * @description Metadata associated with a file
 */
export type Metadata = {
	type: 'File';
} | {
	type: 'Text';
} | {
	type: 'Image';
	width: number;
	height: number;
} | {
	type: 'Video';
	width: number;
	height: number;
} | {
	type: 'Audio';
};

/**
 * @description Relationship entry indicating current status with other user
 */
export interface Relationship {
	/** @description Other user's Id */
	_id: string;
	/** @description Relationship status with them */
	status: RelationshipStatus;
}

/**
 * @description User's relationship with another user (or themselves)
 */
export type RelationshipStatus =
	| 'None'
	| 'User'
	| 'Friend'
	| 'Outgoing'
	| 'Incoming'
	| 'Blocked'
	| 'BlockedOther';

/**
 * @description User's active status
 */
export interface UserStatus {
	/** @description Custom status text */
	text?: string;
	/** @description Current presence option */
	presence?: Presence;
}

/**
 * @description Presence status
 */
export type Presence = 'Online' | 'Idle' | 'Focus' | 'Busy' | 'Invisible';

/**
 * @description Bot information for if the user is a bot
 */
export interface BotInformation {
	/** @description Id of the owner of this bot */
	owner: string;
}

/**
 * @description Id
 */
export type Id = string;

/**
 * @description User flag reponse
 */
export interface FlagResponse {
	/** @description Flags */
	flags: number;
}

/**
 * @description New user information
 */
export interface DataEditUser {
	/** @description New display name */
	display_name?: string;
	/** @description Attachment Id for avatar */
	avatar?: string;
	/** @description New user status */
	status?: UserStatus;
	/** @description New user profile data

This is applied as a partial. */
	profile?: DataUserProfile;
	/** @description Bitfield of user badges */
	badges?: number;
	/** @description Enum of user flags */
	flags?: number;
	/** @description Fields to remove from user object */
	remove?: (FieldsUser)[] | null;
}

/**
 * @description New user profile data
 */
export interface DataUserProfile {
	/** @description Text to set as user profile description */
	content?: string;
	/** @description Attachment Id for background */
	background?: string;
}

/**
 * @description Optional fields on user object
 */
export type FieldsUser =
	| 'Avatar'
	| 'StatusText'
	| 'StatusPresence'
	| 'ProfileContent'
	| 'ProfileBackground'
	| 'DisplayName'
	| 'Internal';

/**
 * @description Username Information
 */
export interface DataChangeUsername {
	/** @description New username */
	username: string;
	/** @description Current account password */
	password: string;
}

/**
 * @description User's profile
 */
export interface UserProfile {
	/** @description Text content on user's profile */
	content?: string;
	/** @description Background visible on user's profile */
	background?: File;
}

/**
 * @description Channel
 */
export type Channel = {
	channel_type: 'SavedMessages';
	_id: string;
	user: string;
} | {
	channel_type: 'DirectMessage';
	_id: string;
	active: boolean;
	recipients: (string)[];
	last_message_id?: string;
} | {
	channel_type: 'Group';
	_id: string;
	name: string;
	owner: string;
	description?: string;
	recipients: (string)[];
	icon?: File;
	last_message_id?: string;
	permissions?: number;
	nsfw?: boolean;
} | {
	channel_type: 'TextChannel';
	_id: string;
	server: string;
	name: string;
	description?: string;
	icon?: File;
	last_message_id?: string;
	default_permissions?: OverrideField;
	role_permissions?: Record<string, OverrideField>;
	nsfw?: boolean;
} | {
	channel_type: 'VoiceChannel';
	_id: string;
	server: string;
	name: string;
	description?: string;
	icon?: File;
	default_permissions?: OverrideField;
	role_permissions?: Record<string, OverrideField>;
	nsfw?: boolean;
};

/**
 * @description Representation of a single permission override as it appears on models and in the database
 */
export interface OverrideField {
	/** @description Allow bit flags */
	a: number;
	/** @description Disallow bit flags */
	d: number;
}

/**
 * @description Mutual friends and servers response
 */
export interface MutualResponse {
	/** @description Array of mutual user IDs that both users are friends with */
	users: (string)[];
	/** @description Array of mutual server IDs that both users are in */
	servers: (string)[];
}

/**
 * @description User lookup information
 */
export interface DataSendFriendRequest {
	/** @description Username and discriminator combo separated by # */
	username: string;
}

/**
 * @description Bot with user response
 */
export interface BotWithUserResponse {
	/** @description user */
	user: User;
	/** @description Bot Id */
	_id: string;
	/** @description User Id of the bot owner */
	owner: string;
	/** @description Token used to authenticate requests for this bot */
	token: string;
	/** @description Whether the bot is public (may be invited by anyone) */
	public: boolean;
	/** @description Whether to enable analytics */
	analytics?: boolean;
	/** @description Whether this bot should be publicly discoverable */
	discoverable?: boolean;
	/** @description Reserved; URL for handling interactions */
	interactions_url?: string;
	/** @description URL for terms of service */
	terms_of_service_url?: string;
	/** @description URL for privacy policy */
	privacy_policy_url?: string;
	/** @description Enum of bot flags */
	flags?: number;
}

/**
 * @description Bot Details
 */
export interface DataCreateBot {
	/** @description Bot username */
	name: string;
}

/**
 * @description Where we are inviting a bot to
 */
export type InviteBotDestination = {
	server: string;
} | {
	group: string;
};

/**
 * @description Public Bot
 */
export interface PublicBot {
	/** @description Bot Id */
	_id: string;
	/** @description Bot Username */
	username: string;
	/** @description Profile Avatar */
	avatar?: string;
	/** @description Profile Description */
	description?: string;
}

/**
 * @description Bot Response
 */
export interface FetchBotResponse {
	/** @description Bot object */
	bot: Bot;
	/** @description User object */
	user: User;
}

/**
 * @description Bot
 */
export interface Bot {
	/** @description Bot Id */
	_id: string;
	/** @description User Id of the bot owner */
	owner: string;
	/** @description Token used to authenticate requests for this bot */
	token: string;
	/** @description Whether the bot is public (may be invited by anyone) */
	public: boolean;
	/** @description Whether to enable analytics */
	analytics?: boolean;
	/** @description Whether this bot should be publicly discoverable */
	discoverable?: boolean;
	/** @description Reserved; URL for handling interactions */
	interactions_url?: string;
	/** @description URL for terms of service */
	terms_of_service_url?: string;
	/** @description URL for privacy policy */
	privacy_policy_url?: string;
	/** @description Enum of bot flags */
	flags?: number;
}

/**
  * @description Owned Bots Response

Both lists are sorted by their IDs.

TODO: user should be in bot object
*/
export interface OwnedBotsResponse {
	/** @description Bot objects */
	bots: (Bot)[];
	/** @description User objects */
	users: (User)[];
}

/**
 * @description New Bot Details
 */
export interface DataEditBot {
	/** @description Bot username */
	name?: string;
	/** @description Whether the bot can be added by anyone */
	public?: boolean;
	/** @description Whether analytics should be gathered for this bot

Must be enabled in order to show up on [Revolt Discover](https://rvlt.gg). */
	analytics?: boolean;
	/** @description Interactions URL */
	interactions_url?: string;
	/** @description Fields to remove from bot object */
	remove?: (FieldsBot)[] | null;
}

/**
 * @description Optional fields on bot object
 */
export type FieldsBot = 'Token' | 'InteractionsURL';

/**
 * @description New webhook information
 */
export interface DataEditChannel {
	/** @description Channel name */
	name?: string;
	/** @description Channel description */
	description?: string;
	/** @description Group owner */
	owner?: string;
	/** @description Icon

Provide an Autumn attachment Id. */
	icon?: string;
	/** @description Whether this channel is age-restricted */
	nsfw?: boolean;
	/** @description Whether this channel is archived */
	archived?: boolean;
	/** @description Fields to remove from channel */
	remove?: (FieldsChannel)[] | null;
}

/**
 * @description Optional fields on channel object
 */
export type FieldsChannel = 'Description' | 'Icon' | 'DefaultPermissions';

/**
 * @description Invite
 */
export type Invite = {
	type: 'Server';
	_id: string;
	server: string;
	creator: string;
	channel: string;
} | {
	type: 'Group';
	_id: string;
	creator: string;
	channel: string;
};

/**
 * @description Message
 */
export interface Message {
	/** @description Unique Id */
	_id: string;
	/** @description Unique value generated by client sending this message */
	nonce?: string;
	/** @description Id of the channel this message was sent in */
	channel: string;
	/** @description Id of the user or webhook that sent this message */
	author: string;
	/** @description The user that sent this message */
	user?: User;
	/** @description The member that sent this message */
	member?: Member;
	/** @description The webhook that sent this message */
	webhook?: MessageWebhook;
	/** @description Message content */
	content?: string;
	/** @description System message */
	system?: SystemMessage;
	/** @description Array of attachments */
	attachments?: (File)[] | null;
	/** @description Time at which this message was last edited */
	edited?: ISO8601Timestamp;
	/** @description Attached embeds to this message */
	embeds?: (Embed)[] | null;
	/** @description Array of user ids mentioned in this message */
	mentions?: (string)[] | null;
	/** @description Array of role ids mentioned in this message */
	role_mentions?: (string)[] | null;
	/** @description Array of message ids this message is replying to */
	replies?: (string)[] | null;
	/** @description Hashmap of emoji IDs to array of user IDs */
	reactions?: Record<string, (string)[]>;
	/** @description Information about how this message should be interacted with */
	interactions?: Interactions;
	/** @description Name and / or avatar overrides for this message */
	masquerade?: Masquerade;
	/** @description Whether or not the message in pinned */
	pinned?: boolean;
	/** @description Bitfield of message flags

https://docs.rs/revolt-models/latest/revolt_models/v0/enum.MessageFlags.html */
	flags?: number;
}

/**
 * @description Server Member
 */
export interface Member {
	/** @description Unique member id */
	_id: MemberCompositeKey;
	/** @description Time at which this user joined the server */
	joined_at: ISO8601Timestamp;
	/** @description Member's nickname */
	nickname?: string;
	/** @description Avatar attachment */
	avatar?: File;
	/** @description Member's roles */
	roles?: (string)[];
	/** @description Timestamp this member is timed out until */
	timeout?: ISO8601Timestamp;
}

/**
 * @description Composite primary key consisting of server and user id
 */
export interface MemberCompositeKey {
	/** @description Server Id */
	server: string;
	/** @description User Id */
	user: string;
}

/**
 * @description ISO8601 formatted timestamp
 */
export type ISO8601Timestamp = string;

/**
 * @description Information about the webhook bundled with Message
 */
export interface MessageWebhook {
	/** @description name */
	name: string;
	/** @description avatar */
	avatar?: string;
}

/**
 * @description System Event
 */
export type SystemMessage = {
	type: 'text';
	content: string;
} | {
	type: 'user_added';
	id: string;
	by: string;
} | {
	type: 'user_remove';
	id: string;
	by: string;
} | {
	type: 'user_joined';
	id: string;
} | {
	type: 'user_left';
	id: string;
} | {
	type: 'user_kicked';
	id: string;
} | {
	type: 'user_banned';
	id: string;
} | {
	type: 'channel_renamed';
	name: string;
	by: string;
} | {
	type: 'channel_description_changed';
	by: string;
} | {
	type: 'channel_icon_changed';
	by: string;
} | {
	type: 'channel_ownership_changed';
	from: string;
	to: string;
} | {
	type: 'message_pinned';
	id: string;
	by: string;
} | {
	type: 'message_unpinned';
	id: string;
	by: string;
};

/**
 * @description Embed
 */
export type Embed = {
	type: 'Website';
	url?: string;
	original_url?: string;
	special?: Special;
	title?: string;
	description?: string;
	image?: Image;
	video?: Video;
	site_name?: string;
	icon_url?: string;
	colour?: string;
} | {
	type: 'Image';
	url: string;
	width: number;
	height: number;
	size: ImageSize;
} | {
	type: 'Video';
	url: string;
	width: number;
	height: number;
} | {
	type: 'Text';
	icon_url?: string;
	url?: string;
	title?: string;
	description?: string;
	media?: File;
	colour?: string;
} | {
	type: 'None';
};

/**
 * @description Information about special remote content
 */
export type Special = {
	type: 'None';
} | {
	type: 'GIF';
} | {
	type: 'YouTube';
	id: string;
	timestamp?: string;
} | {
	type: 'Lightspeed';
	content_type: LightspeedType;
	id: string;
} | {
	type: 'Twitch';
	content_type: TwitchType;
	id: string;
} | {
	type: 'Spotify';
	content_type: string;
	id: string;
} | {
	type: 'Soundcloud';
} | {
	type: 'Bandcamp';
	content_type: BandcampType;
	id: string;
} | {
	type: 'AppleMusic';
	album_id: string;
	track_id?: string;
} | {
	type: 'Streamable';
	id: string;
};

/**
 * @description Type of remote Lightspeed.tv content
 */
export type LightspeedType = 'Channel';

/**
 * @description Type of remote Twitch content
 */
export type TwitchType = 'Channel' | 'Video' | 'Clip';

/**
 * @description Type of remote Bandcamp content
 */
export type BandcampType = 'Album' | 'Track';

/**
 * @description Image
 */
export interface Image {
	/** @description URL to the original image */
	url: string;
	/** @description Width of the image */
	width: number;
	/** @description Height of the image */
	height: number;
	/** @description Positioning and size */
	size: ImageSize;
}

/**
 * @description Image positioning and size
 */
export type ImageSize = 'Large' | 'Preview';

/**
 * @description Video
 */
export interface Video {
	/** @description URL to the original video */
	url: string;
	/** @description Width of the video */
	width: number;
	/** @description Height of the video */
	height: number;
}

/**
 * @description Information to guide interactions on this message
 */
export interface Interactions {
	/** @description Reactions which should always appear and be distinct */
	reactions?: (string)[] | null;
	/** @description Whether reactions should be restricted to the given list

Can only be set to true if reactions list is of at least length 1 */
	restrict_reactions?: boolean;
}

/**
 * @description Name and / or avatar override information
 */
export interface Masquerade {
	/** @description Replace the display name shown on this message */
	name?: string;
	/** @description Replace the avatar shown on this message (URL to image file) */
	avatar?: string;
	/** @description Replace the display role colour shown on this message

Must have `ManageRole` permission to use */
	colour?: string;
}

/**
 * @description Message to send
 */
export interface DataMessageSend {
	/** @description Unique token to prevent duplicate message sending

**This is deprecated and replaced by `Idempotency-Key`!** */
	nonce?: string;
	/** @description Message content to send */
	content?: string;
	/** @description Attachments to include in message */
	attachments?: (string)[] | null;
	/** @description Messages to reply to */
	replies?: (ReplyIntent)[] | null;
	/** @description Embeds to include in message

Text embed content contributes to the content length cap */
	embeds?: (SendableEmbed)[] | null;
	/** @description Masquerade to apply to this message */
	masquerade?: Masquerade;
	/** @description Information about how this message should be interacted with */
	interactions?: Interactions;
	/** @description Bitfield of message flags

https://docs.rs/revolt-models/latest/revolt_models/v0/enum.MessageFlags.html */
	flags?: number;
}

/**
 * @description What this message should reply to and how
 */
export interface ReplyIntent {
	/** @description Message Id */
	id: string;
	/** @description Whether this reply should mention the message's author */
	mention: boolean;
	/** @description Whether to error if the referenced message doesn't exist. Otherwise, send a message without this reply. Default is true. */
	fail_if_not_exists?: boolean;
}

/**
 * @description Representation of a text embed before it is sent.
 */
export interface SendableEmbed {
	/** @description icon_url */
	icon_url?: string;
	/** @description url */
	url?: string;
	/** @description title */
	title?: string;
	/** @description description */
	description?: string;
	/** @description media */
	media?: string;
	/** @description colour */
	colour?: string;
}

/**
 * @description Bulk Message Response
 */
export type BulkMessageResponse = (Message)[] | {
	messages: (Message)[];
	users: (User)[];
	members?: (Member)[] | null;
};

/**
  * @description Message Sort

Sort used for retrieving messages
*/
export type MessageSort = 'Relevance' | 'Latest' | 'Oldest';

/**
 * @description Options for searching for messages
 */
export interface DataMessageSearch {
	/** @description Full-text search query

See [MongoDB documentation](https://docs.mongodb.com/manual/text-search/#-text-operator) for more information. */
	query?: string;
	/** @description Whether to only search for pinned messages, cannot be sent with `query`. */
	pinned?: boolean;
	/** @description Maximum number of messages to fetch */
	limit?: number;
	/** @description Message id before which messages should be fetched */
	before?: string;
	/** @description Message id after which messages should be fetched */
	after?: string;
	/** @description Message sort direction

By default, it will be sorted by latest. */
	sort?: MessageSort;
	/** @description Whether to include user (and member, if server channel) objects */
	include_users?: boolean;
}

/**
 * @description Changes to make to message
 */
export interface DataEditMessage {
	/** @description New message content */
	content?: string;
	/** @description Embeds to include in the message */
	embeds?: (SendableEmbed)[] | null;
}

/**
 * @description Options for bulk deleting messages
 */
export interface OptionsBulkDelete {
	/** @description Message IDs */
	ids: (string)[];
}

/**
 * @description Create new group
 */
export interface DataCreateGroup {
	/** @description Group name */
	name: string;
	/** @description Group description */
	description?: string;
	/** @description Group icon */
	icon?: string;
	/** @description Array of user IDs to add to the group

Must be friends with these users. */
	users?: (string)[];
	/** @description Whether this group is age-restricted */
	nsfw?: boolean;
}

/**
 * @description Voice server token response
 */
export interface LegacyCreateVoiceUserResponse {
	/** @description Token for authenticating with the voice server */
	token: string;
}

/**
 * @description New role permissions
 */
export interface DataSetRolePermissions {
	/** @description Allow / deny values to set for this role */
	permissions: Override;
}

/**
 * @description Representation of a single permission override
 */
export interface Override {
	/** @description Allow bit flags */
	allow: number;
	/** @description Disallow bit flags */
	deny: number;
}

/**
 * @description New default permissions
 */
export type DataDefaultChannelPermissions = {
	permissions: number;
} | {
	permissions: Override;
};

/**
 * @description Webhook
 */
export interface Webhook {
	/** @description Webhook Id */
	id: string;
	/** @description The name of the webhook */
	name: string;
	/** @description The avatar of the webhook */
	avatar?: File;
	/** @description User that created this webhook */
	creator_id: string;
	/** @description The channel this webhook belongs to */
	channel_id: string;
	/** @description The permissions for the webhook */
	permissions: number;
	/** @description The private token for the webhook */
	token?: string;
}

/**
 * @description Information for the webhook
 */
export interface CreateWebhookBody {
	/** @description name */
	name: string;
	/** @description avatar */
	avatar?: string;
}

/**
 * @description Information returned when creating server
 */
export interface CreateServerLegacyResponse {
	/** @description Server object */
	server: Server;
	/** @description Default channels */
	channels: (Channel)[];
}

/**
 * @description Server
 */
export interface Server {
	/** @description Unique Id */
	_id: string;
	/** @description User id of the owner */
	owner: string;
	/** @description Name of the server */
	name: string;
	/** @description Description for the server */
	description?: string;
	/** @description Channels within this server */
	channels: (string)[];
	/** @description Categories for this server */
	categories?: (Category)[] | null;
	/** @description Configuration for sending system event messages */
	system_messages?: SystemMessageChannels;
	/** @description Roles for this server */
	roles?: Record<string, Role>;
	/** @description Default set of server and channel permissions */
	default_permissions: number;
	/** @description Icon attachment */
	icon?: File;
	/** @description Banner attachment */
	banner?: File;
	/** @description Bitfield of server flags */
	flags?: number;
	/** @description Whether this server is flagged as not safe for work */
	nsfw?: boolean;
	/** @description Whether to enable analytics */
	analytics?: boolean;
	/** @description Whether this server should be publicly discoverable */
	discoverable?: boolean;
}

/**
 * @description Channel category
 */
export interface Category {
	/** @description Unique ID for this category */
	id: string;
	/** @description Title for this category */
	title: string;
	/** @description Channels in this category */
	channels: (string)[];
}

/**
 * @description System message channel assignments
 */
export interface SystemMessageChannels {
	/** @description ID of channel to send user join messages in */
	user_joined?: string;
	/** @description ID of channel to send user left messages in */
	user_left?: string;
	/** @description ID of channel to send user kicked messages in */
	user_kicked?: string;
	/** @description ID of channel to send user banned messages in */
	user_banned?: string;
}

/**
 * @description Role
 */
export interface Role {
	/** @description Role name */
	name: string;
	/** @description Permissions available to this role */
	permissions: OverrideField;
	/** @description Colour used for this role

This can be any valid CSS colour */
	colour?: string;
	/** @description Whether this role should be shown separately on the member sidebar */
	hoist?: boolean;
	/** @description Ranking of this role */
	rank?: number;
}

/**
 * @description Information about new server to create
 */
export interface DataCreateServer {
	/** @description Server name */
	name: string;
	/** @description Server description */
	description?: string;
	/** @description Whether this server is age-restricted */
	nsfw?: boolean;
}

/**
 * @description Fetch server information
 */
export type FetchServerResponse = Server | {
	channels: (string)[];
	_id: string;
	owner: string;
	name: string;
	description?: string;
	categories?: (Category)[] | null;
	system_messages?: SystemMessageChannels;
	roles?: Record<string, Role>;
	default_permissions: number;
	icon?: File;
	banner?: File;
	flags?: number;
	nsfw?: boolean;
	analytics?: boolean;
	discoverable?: boolean;
};

/**
 * @description New server information
 */
export interface DataEditServer {
	/** @description Server name */
	name?: string;
	/** @description Server description */
	description?: string;
	/** @description Attachment Id for icon */
	icon?: string;
	/** @description Attachment Id for banner */
	banner?: string;
	/** @description Category structure for server */
	categories?: (Category)[] | null;
	/** @description System message configuration */
	system_messages?: SystemMessageChannels;
	/** @description Bitfield of server flags */
	flags?: number;
	/** @description Whether this server is public and should show up on [Revolt Discover](https://rvlt.gg) */
	discoverable?: boolean;
	/** @description Whether analytics should be collected for this server

Must be enabled in order to show up on [Revolt Discover](https://rvlt.gg). */
	analytics?: boolean;
	/** @description Fields to remove from server object */
	remove?: (FieldsServer)[] | null;
}

/**
 * @description Optional fields on server object
 */
export type FieldsServer =
	| 'Description'
	| 'Categories'
	| 'SystemMessages'
	| 'Icon'
	| 'Banner';

/**
 * @description Create new server channel
 */
export interface DataCreateServerChannel {
	/** @description Channel type */
	type?: LegacyServerChannelType;
	/** @description Channel name */
	name: string;
	/** @description Channel description */
	description?: string;
	/** @description Whether this channel is age restricted */
	nsfw?: boolean;
}

/**
 * @description Server Channel Type
 */
export type LegacyServerChannelType = 'Text' | 'Voice';

/**
 * @description Response with all members
 */
export interface AllMemberResponse {
	/** @description List of members */
	members: (Member)[];
	/** @description List of users */
	users: (User)[];
}

/**
 * @description Member response
 */
export type MemberResponse = Member | {
	member: Member;
	roles: Record<string, Role>;
};

/**
 * @description New member information
 */
export interface DataMemberEdit {
	/** @description Member nickname */
	nickname?: string;
	/** @description Attachment Id to set for avatar */
	avatar?: string;
	/** @description Array of role ids */
	roles?: (string)[] | null;
	/** @description Timestamp this member is timed out until */
	timeout?: ISO8601Timestamp;
	/** @description Fields to remove from channel object */
	remove?: (FieldsMember)[] | null;
}

/**
 * @description Optional fields on server member object
 */
export type FieldsMember = 'Nickname' | 'Avatar' | 'Roles' | 'Timeout';

/**
 * @description Query members by name
 */
export interface MemberQueryResponse {
	/** @description List of members */
	members: (Member)[];
	/** @description List of users */
	users: (User)[];
}

/**
 * @description Server Ban
 */
export interface ServerBan {
	/** @description Unique member id */
	_id: MemberCompositeKey;
	/** @description Reason for ban creation */
	reason?: string;
}

/**
 * @description Information for new server ban
 */
export interface DataBanCreate {
	/** @description Ban reason */
	reason?: string;
}

/**
 * @description Ban list result
 */
export interface BanListResult {
	/** @description Users objects */
	users: (BannedUser)[];
	/** @description Ban objects */
	bans: (ServerBan)[];
}

/**
 * @description Just enough information to list a ban
 */
export interface BannedUser {
	/** @description Id of the banned user */
	_id: string;
	/** @description Username of the banned user */
	username: string;
	/** @description Discriminator of the banned user */
	discriminator: string;
	/** @description Avatar of the banned user */
	avatar?: File;
}

/**
 * @description Response after creating new role
 */
export interface NewRoleResponse {
	/** @description Id of the role */
	id: string;
	/** @description New role */
	role: Role;
}

/**
 * @description Information about new role to create
 */
export interface DataCreateRole {
	/** @description Role name */
	name: string;
	/** @description Ranking position

Smaller values take priority. */
	rank?: number;
}

/**
 * @description New role information
 */
export interface DataEditRole {
	/** @description Role name */
	name?: string;
	/** @description Role colour */
	colour?: string;
	/** @description Whether this role should be displayed separately */
	hoist?: boolean;
	/** @description Ranking position

Smaller values take priority. */
	rank?: number;
	/** @description Fields to remove from role object */
	remove?: (FieldsRole)[] | null;
}

/**
 * @description Optional fields on server object
 */
export type FieldsRole = 'Colour';

/**
 * @description New role permissions
 */
export interface DataSetServerRolePermission {
	/** @description Allow / deny values for the role in this server. */
	permissions: Override;
}

/**
 * @description Data permissions Value - contains allow
 */
export interface DataPermissionsValue {
	/** @description permissions */
	permissions: number;
}

/**
 * @description Emoji
 */
export interface Emoji {
	/** @description Unique Id */
	_id: string;
	/** @description What owns this emoji */
	parent: EmojiParent;
	/** @description Uploader user id */
	creator_id: string;
	/** @description Emoji name */
	name: string;
	/** @description Whether the emoji is animated */
	animated?: boolean;
	/** @description Whether the emoji is marked as nsfw */
	nsfw?: boolean;
}

/**
 * @description Parent Id of the emoji
 */
export type EmojiParent = {
	type: 'Server';
	id: string;
} | {
	type: 'Detached';
};

/**
 * @description Public invite response
 */
export type InviteResponse = {
	type: 'Server';
	code: string;
	server_id: string;
	server_name: string;
	server_icon?: File;
	server_banner?: File;
	server_flags?: number;
	channel_id: string;
	channel_name: string;
	channel_description?: string;
	user_name: string;
	user_avatar?: File;
	member_count: number;
} | {
	type: 'Group';
	code: string;
	channel_id: string;
	channel_name: string;
	channel_description?: string;
	user_name: string;
	user_avatar?: File;
};

/**
 * @description Invite join response
 */
export type InviteJoinResponse = {
	type: 'Server';
	channels: (Channel)[];
	server: Server;
} | {
	type: 'Group';
	channel: Channel;
	users: (User)[];
};

/**
 * @description Create a new emoji
 */
export interface DataCreateEmoji {
	/** @description Server name */
	name: string;
	/** @description Parent information */
	parent: EmojiParent;
	/** @description Whether the emoji is mature */
	nsfw?: boolean;
}

/**
 * @description Report Data
 */
export interface DataReportContent {
	/** @description Content being reported */
	content: ReportedContent;
	/** @description Additional report description */
	additional_context?: string;
}

/**
 * @description The content being reported
 */
export type ReportedContent = {
	type: 'Message';
	id: string;
	report_reason: ContentReportReason;
} | {
	type: 'Server';
	id: string;
	report_reason: ContentReportReason;
} | {
	type: 'User';
	id: string;
	report_reason: UserReportReason;
	message_id?: string;
};

/**
 * @description Reason for reporting content (message or server)
 */
export type ContentReportReason =
	| 'NoneSpecified'
	| 'Illegal'
	| 'IllegalGoods'
	| 'IllegalExtortion'
	| 'IllegalPornography'
	| 'IllegalHacking'
	| 'ExtremeViolence'
	| 'PromotesHarm'
	| 'UnsolicitedSpam'
	| 'Raid'
	| 'SpamAbuse'
	| 'ScamsFraud'
	| 'Malware'
	| 'Harassment';

/**
 * @description Reason for reporting a user
 */
export type UserReportReason =
	| 'NoneSpecified'
	| 'UnsolicitedSpam'
	| 'SpamAbuse'
	| 'InappropriateProfile'
	| 'Impersonation'
	| 'BanEvasion'
	| 'Underage';

/**
 * @description Error
 */
export type AuthifierError = {
	type: 'IncorrectData';
	with: string;
} | {
	type: 'DatabaseError';
	operation: string;
	with: string;
} | {
	type: 'InternalError';
} | {
	type: 'OperationFailed';
} | {
	type: 'RenderFail';
} | {
	type: 'MissingHeaders';
} | {
	type: 'CaptchaFailed';
} | {
	type: 'BlockedByShield';
} | {
	type: 'InvalidSession';
} | {
	type: 'UnverifiedAccount';
} | {
	type: 'UnknownUser';
} | {
	type: 'EmailFailed';
} | {
	type: 'InvalidToken';
} | {
	type: 'MissingInvite';
} | {
	type: 'InvalidInvite';
} | {
	type: 'InvalidCredentials';
} | {
	type: 'CompromisedPassword';
} | {
	type: 'ShortPassword';
} | {
	type: 'Blacklisted';
} | {
	type: 'LockedOut';
} | {
	type: 'TotpAlreadyEnabled';
} | {
	type: 'DisallowedMFAMethod';
};

/**
 * @description Account Data
 */
export interface DataCreateAccount {
	/** @description Valid email address */
	email: string;
	/** @description Password */
	password: string;
	/** @description Invite code */
	invite?: string;
	/** @description Captcha verification code */
	captcha?: string;
}

/**
 * @description Resend Information
 */
export interface DataResendVerification {
	/** @description Email associated with the account */
	email: string;
	/** @description Captcha verification code */
	captcha?: string;
}

/**
 * @description Account Deletion Token
 */
export interface DataAccountDeletion {
	/** @description Deletion token */
	token: string;
}

/**
 * @description AccountInfo
 */
export interface AccountInfo {
	/** @description _id */
	_id: string;
	/** @description email */
	email: string;
}

/**
 * @description Change Data
 */
export interface DataChangePassword {
	/** @description New password */
	password: string;
	/** @description Current password */
	current_password: string;
}

/**
 * @description Change Data
 */
export interface DataChangeEmail {
	/** @description Valid email address */
	email: string;
	/** @description Current password */
	current_password: string;
}

/**
 * @description ResponseVerify
 */
export type ResponseVerify = null | {
	ticket: MFATicket;
};

/**
 * @description Multi-factor auth ticket
 */
export interface MFATicket {
	/** @description Unique Id */
	_id: string;
	/** @description Account Id */
	account_id: string;
	/** @description Unique Token */
	token: string;
	/** @description Whether this ticket has been validated (can be used for account actions) */
	validated: boolean;
	/** @description Whether this ticket is authorised (can be used to log a user in) */
	authorised: boolean;
	/** @description TOTP code at time of ticket creation */
	last_totp_code?: string;
}

/**
 * @description Password Reset
 */
export interface DataPasswordReset {
	/** @description Reset token */
	token: string;
	/** @description New password */
	password: string;
	/** @description Whether to logout all sessions */
	remove_sessions?: boolean;
}

/**
 * @description Reset Information
 */
export interface DataSendPasswordReset {
	/** @description Email associated with the account */
	email: string;
	/** @description Captcha verification code */
	captcha?: string;
}

/**
 * @description ResponseLogin
 */
export type ResponseLogin = {
	result: 'Success';
	_id: string;
	user_id: string;
	token: string;
	name: string;
	last_seen: string;
	origin?: string;
	subscription?: WebPushSubscription;
} | {
	result: 'MFA';
	ticket: string;
	allowed_methods: (MFAMethod)[];
} | {
	result: 'Disabled';
	user_id: string;
};

/**
 * @description Web Push subscription
 */
export interface WebPushSubscription {
	/** @description endpoint */
	endpoint: string;
	/** @description p256dh */
	p256dh: string;
	/** @description auth */
	auth: string;
}

/**
 * @description MFA method
 */
export type MFAMethod = 'Password' | 'Recovery' | 'Totp';

/**
 * @description Login Data
 */
export type DataLogin = {
	email: string;
	password: string;
	friendly_name?: string;
} | {
	mfa_ticket: string;
	mfa_response?: MFAResponse;
	friendly_name?: string;
};

/**
 * @description MFA response
 */
export type MFAResponse = {
	password: string;
} | {
	recovery_code: string;
} | {
	totp_code: string;
};

/**
 * @description SessionInfo
 */
export interface SessionInfo {
	/** @description _id */
	_id: string;
	/** @description name */
	name: string;
}

/**
 * @description Edit Data
 */
export interface DataEditSession {
	/** @description Session friendly name */
	friendly_name: string;
}

/**
 * @description MultiFactorStatus
 */
export interface MultiFactorStatus {
	/** @description email_otp */
	email_otp: boolean;
	/** @description trusted_handover */
	trusted_handover: boolean;
	/** @description email_mfa */
	email_mfa: boolean;
	/** @description totp_mfa */
	totp_mfa: boolean;
	/** @description security_key_mfa */
	security_key_mfa: boolean;
	/** @description recovery_active */
	recovery_active: boolean;
}

/**
 * @description Totp Secret
 */
export interface ResponseTotpSecret {
	/** @description secret */
	secret: string;
}

/**
 * @description Onboarding Status
 */
export interface DataHello {
	/** @description Whether onboarding is required */
	onboarding: boolean;
}

/**
 * @description New User Data
 */
export interface DataOnboard {
	/** @description New username which will be used to identify the user on the platform */
	username: string;
}

/**
 * @description Options for fetching settings
 */
export interface OptionsFetchSettings {
	/** @description Keys to fetch */
	keys: (string)[];
}

/**
 * @description Channel Unread
 */
export interface ChannelUnread {
	/** @description Composite key pointing to a user's view of a channel */
	_id: ChannelCompositeKey;
	/** @description Id of the last message read in this channel by a user */
	last_id?: string;
	/** @description Array of message ids that mention the user */
	mentions?: (string)[];
}

/**
 * @description Composite primary key consisting of channel and user id
 */
export interface ChannelCompositeKey {
	/** @description Channel Id */
	channel: string;
	/** @description User Id */
	user: string;
}

/** @description API operations */
export interface operations {
	/** Fetch the server configuration for this Revolt instance. */
	root_root: {
		responses: {
			200: {
				content: {
					'application/json': RevoltConfig;
				};
			};
			default: {
				/** An error occurred. */
				content: {
					'application/json': Error;
				};
			};
		};
	};
	/** Retrieve your user information. */
	fetch_self_fetch: {
		responses: {
			200: {
				content: {
					'application/json': User;
				};
			};
			default: {
				/** An error occurred. */
				content: {
					'application/json': Error;
				};
			};
		};
	};
	/** Retrieve a user's information. */
	fetch_user_fetch: {
		parameters: {
			path: {
				/** target */
				target: Id;
			};
		};
		responses: {
			200: {
				content: {
					'application/json': User;
				};
			};
			default: {
				/** An error occurred. */
				content: {
					'application/json': Error;
				};
			};
		};
	};
	/** Edit currently authenticated user. */
	edit_user_edit: {
		parameters: {
			path: {
				/** target */
				target: Id;
			};
		};
		requestBody: {
			content: {
				'application/json': DataEditUser;
			};
		};
		responses: {
			200: {
				content: {
					'application/json': User;
				};
			};
			default: {
				/** An error occurred. */
				content: {
					'application/json': Error;
				};
			};
		};
	};
	/** Retrieve a user's flags. */
	fetch_user_flags_fetch_user_flags: {
		parameters: {
			path: {
				/** target */
				target: Id;
			};
		};
		responses: {
			200: {
				content: {
					'application/json': FlagResponse;
				};
			};
			default: {
				/** An error occurred. */
				content: {
					'application/json': Error;
				};
			};
		};
	};
	/** Change your username. */
	change_username_change_username: {
		requestBody: {
			content: {
				'application/json': DataChangeUsername;
			};
		};
		responses: {
			200: {
				content: {
					'application/json': User;
				};
			};
			default: {
				/** An error occurred. */
				content: {
					'application/json': Error;
				};
			};
		};
	};
	/** This returns a default avatar based on the given id. */
	get_default_avatar_default_avatar: {
		parameters: {
			path: {
				/** target */
				target: string;
			};
		};
		responses: {
			200: {
				/** Default Avatar Picture */
				content: {
					'image/png': string;
				};
			};
		};
	};
	/** Retrieve a user's profile data.

Will fail if you do not have permission to access the other user's profile. */
	fetch_profile_profile: {
		parameters: {
			path: {
				/** target */
				target: Id;
			};
		};
		responses: {
			200: {
				content: {
					'application/json': UserProfile;
				};
			};
			default: {
				/** An error occurred. */
				content: {
					'application/json': Error;
				};
			};
		};
	};
	/** This fetches your direct messages, including any DM and group DM conversations. */
	fetch_dms_direct_messages: {
		responses: {
			200: {
				content: {
					'application/json': (Channel)[];
				};
			};
			default: {
				/** An error occurred. */
				content: {
					'application/json': Error;
				};
			};
		};
	};
	/** Open a DM with another user.

If the target is oneself, a saved messages channel is returned. */
	open_dm_open_dm: {
		parameters: {
			path: {
				/** target */
				target: Id;
			};
		};
		responses: {
			200: {
				content: {
					'application/json': Channel;
				};
			};
			default: {
				/** An error occurred. */
				content: {
					'application/json': Error;
				};
			};
		};
	};
	/** Retrieve a list of mutual friends and servers with another user. */
	find_mutual_mutual: {
		parameters: {
			path: {
				/** target */
				target: Id;
			};
		};
		responses: {
			200: {
				content: {
					'application/json': MutualResponse;
				};
			};
			default: {
				/** An error occurred. */
				content: {
					'application/json': Error;
				};
			};
		};
	};
	/** Accept another user's friend request. */
	add_friend_add: {
		parameters: {
			path: {
				/** target */
				target: Id;
			};
		};
		responses: {
			200: {
				content: {
					'application/json': User;
				};
			};
			default: {
				/** An error occurred. */
				content: {
					'application/json': Error;
				};
			};
		};
	};
	/** Denies another user's friend request or removes an existing friend. */
	remove_friend_remove: {
		parameters: {
			path: {
				/** target */
				target: Id;
			};
		};
		responses: {
			200: {
				content: {
					'application/json': User;
				};
			};
			default: {
				/** An error occurred. */
				content: {
					'application/json': Error;
				};
			};
		};
	};
	/** Block another user by their id. */
	block_user_block: {
		parameters: {
			path: {
				/** target */
				target: Id;
			};
		};
		responses: {
			200: {
				content: {
					'application/json': User;
				};
			};
			default: {
				/** An error occurred. */
				content: {
					'application/json': Error;
				};
			};
		};
	};
	/** Unblock another user by their id. */
	unblock_user_unblock: {
		parameters: {
			path: {
				/** target */
				target: Id;
			};
		};
		responses: {
			200: {
				content: {
					'application/json': User;
				};
			};
			default: {
				/** An error occurred. */
				content: {
					'application/json': Error;
				};
			};
		};
	};
	/** Send a friend request to another user. */
	send_friend_request_send_friend_request: {
		requestBody: {
			content: {
				'application/json': DataSendFriendRequest;
			};
		};
		responses: {
			200: {
				content: {
					'application/json': User;
				};
			};
			default: {
				/** An error occurred. */
				content: {
					'application/json': Error;
				};
			};
		};
	};
	/** Create a new Revolt bot. */
	create_create_bot: {
		requestBody: {
			content: {
				'application/json': DataCreateBot;
			};
		};
		responses: {
			200: {
				content: {
					'application/json': BotWithUserResponse;
				};
			};
			default: {
				/** An error occurred. */
				content: {
					'application/json': Error;
				};
			};
		};
	};
	/** Fetch details of a public (or owned) bot by its id. */
	fetch_public_fetch_public_bot: {
		parameters: {
			path: {
				/** target */
				target: Id;
			};
		};
		responses: {
			200: {
				content: {
					'application/json': PublicBot;
				};
			};
			default: {
				/** An error occurred. */
				content: {
					'application/json': Error;
				};
			};
		};
	};
	/** Invite a bot to a server or group by its id.` */
	invite_invite_bot: {
		parameters: {
			path: {
				/** target */
				target: Id;
			};
		};
		requestBody: {
			content: {
				'application/json': InviteBotDestination;
			};
		};
		responses: {
			204: {
				/** Success */
				type: undefined;
			};
			default: {
				/** An error occurred. */
				content: {
					'application/json': Error;
				};
			};
		};
	};
	/** Fetch details of a bot you own by its id. */
	fetch_fetch_bot: {
		parameters: {
			path: {
				/** bot */
				bot: Id;
			};
		};
		responses: {
			200: {
				content: {
					'application/json': FetchBotResponse;
				};
			};
			default: {
				/** An error occurred. */
				content: {
					'application/json': Error;
				};
			};
		};
	};
	/** Fetch all of the bots that you have control over. */
	fetch_owned_fetch_owned_bots: {
		responses: {
			200: {
				content: {
					'application/json': OwnedBotsResponse;
				};
			};
			default: {
				/** An error occurred. */
				content: {
					'application/json': Error;
				};
			};
		};
	};
	/** Delete a bot by its id. */
	delete_delete_bot: {
		parameters: {
			path: {
				/** target */
				target: Id;
			};
		};
		responses: {
			204: {
				/** Success */
				type: undefined;
			};
			default: {
				/** An error occurred. */
				content: {
					'application/json': Error;
				};
			};
		};
	};
	/** Edit bot details by its id. */
	edit_edit_bot: {
		parameters: {
			path: {
				/** target */
				target: Id;
			};
		};
		requestBody: {
			content: {
				'application/json': DataEditBot;
			};
		};
		responses: {
			200: {
				content: {
					'application/json': BotWithUserResponse;
				};
			};
			default: {
				/** An error occurred. */
				content: {
					'application/json': Error;
				};
			};
		};
	};
	/** Lets the server and all other clients know that we've seen this message id in this channel. */
	channel_ack_ack: {
		parameters: {
			path: {
				/** target */
				target: Id;
				/** message */
				message: Id;
			};
		};
		responses: {
			204: {
				/** Success */
				type: undefined;
			};
			default: {
				/** An error occurred. */
				content: {
					'application/json': Error;
				};
			};
		};
	};
	/** Fetch channel by its id. */
	channel_fetch_fetch: {
		parameters: {
			path: {
				/** target */
				target: Id;
			};
		};
		responses: {
			200: {
				content: {
					'application/json': Channel;
				};
			};
			default: {
				/** An error occurred. */
				content: {
					'application/json': Error;
				};
			};
		};
	};
	/** Deletes a server channel, leaves a group or closes a group. */
	channel_delete_delete: {
		parameters: {
			path: {
				/** target */
				target: Id;
			};
			query: {
				/** Whether to not send a leave message */
				leave_silently: boolean | null;
			};
		};
		responses: {
			204: {
				/** Success */
				type: undefined;
			};
			default: {
				/** An error occurred. */
				content: {
					'application/json': Error;
				};
			};
		};
	};
	/** Edit a channel object by its id. */
	channel_edit_edit: {
		parameters: {
			path: {
				/** target */
				target: Id;
			};
		};
		requestBody: {
			content: {
				'application/json': DataEditChannel;
			};
		};
		responses: {
			200: {
				content: {
					'application/json': Channel;
				};
			};
			default: {
				/** An error occurred. */
				content: {
					'application/json': Error;
				};
			};
		};
	};
	/** Retrieves all users who are part of this group.

This may not return full user information if users are not friends but have mutual connections. */
	members_fetch_fetch_members: {
		parameters: {
			path: {
				/** target */
				target: Id;
			};
		};
		responses: {
			200: {
				content: {
					'application/json': (User)[];
				};
			};
			default: {
				/** An error occurred. */
				content: {
					'application/json': Error;
				};
			};
		};
	};
	/** Creates an invite to this channel.

Channel must be a `TextChannel`. */
	invite_create_create_invite: {
		parameters: {
			path: {
				/** target */
				target: Id;
			};
		};
		responses: {
			200: {
				content: {
					'application/json': Invite;
				};
			};
			default: {
				/** An error occurred. */
				content: {
					'application/json': Error;
				};
			};
		};
	};
	/** Fetch multiple messages. */
	message_query_query: {
		parameters: {
			path: {
				/** target */
				target: Id;
			};
			query: {
				/** Maximum number of messages to fetch

For fetching nearby messages, this is \`(limit + 2)\`. */
				limit: number | null;
				/** Message id before which messages should be fetched */
				before: string | null;
				/** Message id after which messages should be fetched */
				after: string | null;
				/** Message sort direction */
				sort: MessageSort;
				/** Message id to search around

Specifying 'nearby' ignores 'before', 'after' and 'sort'. It will also take half of limit rounded as the limits to each side. It also fetches the message ID specified. */
				nearby: string | null;
				/** Whether to include user (and member, if server channel) objects */
				include_users: boolean | null;
			};
		};
		responses: {
			200: {
				content: {
					'application/json': BulkMessageResponse;
				};
			};
			default: {
				/** An error occurred. */
				content: {
					'application/json': Error;
				};
			};
		};
	};
	/** Sends a message to the given channel. */
	message_send_message_send: {
		parameters: {
			path: {
				/** target */
				target: Id;
			};
			header: {
				/** Unique key to prevent duplicate requests */
				'Idempotency-Key': string;
			};
		};
		requestBody: {
			content: {
				'application/json': DataMessageSend;
			};
		};
		responses: {
			200: {
				content: {
					'application/json': Message;
				};
			};
			default: {
				/** An error occurred. */
				content: {
					'application/json': Error;
				};
			};
		};
	};
	/** This route searches for messages within the given parameters. */
	message_search_search: {
		parameters: {
			path: {
				/** target */
				target: Id;
			};
		};
		requestBody: {
			content: {
				'application/json': DataMessageSearch;
			};
		};
		responses: {
			200: {
				content: {
					'application/json': BulkMessageResponse;
				};
			};
			default: {
				/** An error occurred. */
				content: {
					'application/json': Error;
				};
			};
		};
	};
	/** Pins a message by its id. */
	message_pin_message_pin: {
		parameters: {
			path: {
				/** target */
				target: Id;
				/** msg */
				msg: Id;
			};
		};
		responses: {
			204: {
				/** Success */
				type: undefined;
			};
			default: {
				/** An error occurred. */
				content: {
					'application/json': Error;
				};
			};
		};
	};
	/** Unpins a message by its id. */
	message_unpin_message_unpin: {
		parameters: {
			path: {
				/** target */
				target: Id;
				/** msg */
				msg: Id;
			};
		};
		responses: {
			204: {
				/** Success */
				type: undefined;
			};
			default: {
				/** An error occurred. */
				content: {
					'application/json': Error;
				};
			};
		};
	};
	/** Retrieves a message by its id. */
	message_fetch_fetch: {
		parameters: {
			path: {
				/** target */
				target: Id;
				/** msg */
				msg: Id;
			};
		};
		responses: {
			200: {
				content: {
					'application/json': Message;
				};
			};
			default: {
				/** An error occurred. */
				content: {
					'application/json': Error;
				};
			};
		};
	};
	/** Delete a message you've sent or one you have permission to delete. */
	message_delete_delete: {
		parameters: {
			path: {
				/** target */
				target: Id;
				/** msg */
				msg: Id;
			};
		};
		responses: {
			204: {
				/** Success */
				type: undefined;
			};
			default: {
				/** An error occurred. */
				content: {
					'application/json': Error;
				};
			};
		};
	};
	/** Edits a message that you've previously sent. */
	message_edit_edit: {
		parameters: {
			path: {
				/** target */
				target: Id;
				/** msg */
				msg: Id;
			};
		};
		requestBody: {
			content: {
				'application/json': DataEditMessage;
			};
		};
		responses: {
			200: {
				content: {
					'application/json': Message;
				};
			};
			default: {
				/** An error occurred. */
				content: {
					'application/json': Error;
				};
			};
		};
	};
	/** Delete multiple messages you've sent or one you have permission to delete.

This will always require `ManageMessages` permission regardless of whether you own the message or not.

Messages must have been sent within the past 1 week. */
	message_bulk_delete_bulk_delete_messages: {
		parameters: {
			path: {
				/** target */
				target: Id;
			};
		};
		requestBody: {
			content: {
				'application/json': OptionsBulkDelete;
			};
		};
		responses: {
			204: {
				/** Success */
				type: undefined;
			};
			default: {
				/** An error occurred. */
				content: {
					'application/json': Error;
				};
			};
		};
	};
	/** Create a new group channel. */
	group_create_create_group: {
		requestBody: {
			content: {
				'application/json': DataCreateGroup;
			};
		};
		responses: {
			200: {
				content: {
					'application/json': Channel;
				};
			};
			default: {
				/** An error occurred. */
				content: {
					'application/json': Error;
				};
			};
		};
	};
	/** Adds another user to the group. */
	group_add_member_add_member: {
		parameters: {
			path: {
				/** group_id */
				group_id: Id;
				/** member_id */
				member_id: Id;
			};
		};
		responses: {
			204: {
				/** Success */
				type: undefined;
			};
			default: {
				/** An error occurred. */
				content: {
					'application/json': Error;
				};
			};
		};
	};
	/** Removes a user from the group. */
	group_remove_member_remove_member: {
		parameters: {
			path: {
				/** target */
				target: Id;
				/** member */
				member: Id;
			};
		};
		responses: {
			204: {
				/** Success */
				type: undefined;
			};
			default: {
				/** An error occurred. */
				content: {
					'application/json': Error;
				};
			};
		};
	};
	/** Asks the voice server for a token to join the call. */
	voice_join_call: {
		parameters: {
			path: {
				/** target */
				target: Id;
			};
		};
		responses: {
			200: {
				content: {
					'application/json': LegacyCreateVoiceUserResponse;
				};
			};
			default: {
				/** An error occurred. */
				content: {
					'application/json': Error;
				};
			};
		};
	};
	/** Sets permissions for the specified role in this channel.

Channel must be a `TextChannel` or `VoiceChannel`. */
	permissions_set_set_role_permissions: {
		parameters: {
			path: {
				/** target */
				target: Id;
				/** role_id */
				role_id: string;
			};
		};
		requestBody: {
			content: {
				'application/json': DataSetRolePermissions;
			};
		};
		responses: {
			200: {
				content: {
					'application/json': Channel;
				};
			};
			default: {
				/** An error occurred. */
				content: {
					'application/json': Error;
				};
			};
		};
	};
	/** Sets permissions for the default role in this channel.

Channel must be a `Group`, `TextChannel` or `VoiceChannel`. */
	permissions_set_default_set_default_permissions: {
		parameters: {
			path: {
				/** target */
				target: Id;
			};
		};
		requestBody: {
			content: {
				'application/json': DataDefaultChannelPermissions;
			};
		};
		responses: {
			200: {
				content: {
					'application/json': Channel;
				};
			};
			default: {
				/** An error occurred. */
				content: {
					'application/json': Error;
				};
			};
		};
	};
	/** React to a given message. */
	message_react_react_message: {
		parameters: {
			path: {
				/** target */
				target: Id;
				/** msg */
				msg: Id;
				/** emoji */
				emoji: Id;
			};
		};
		responses: {
			204: {
				/** Success */
				type: undefined;
			};
			default: {
				/** An error occurred. */
				content: {
					'application/json': Error;
				};
			};
		};
	};
	/** Remove your own, someone else's or all of a given reaction.

Requires `ManageMessages` if changing others' reactions. */
	message_unreact_unreact_message: {
		parameters: {
			path: {
				/** target */
				target: Id;
				/** msg */
				msg: Id;
				/** emoji */
				emoji: Id;
			};
			query: {
				/** Remove a specific user's reaction */
				user_id: string | null;
				/** Remove all reactions */
				remove_all: boolean | null;
			};
		};
		responses: {
			204: {
				/** Success */
				type: undefined;
			};
			default: {
				/** An error occurred. */
				content: {
					'application/json': Error;
				};
			};
		};
	};
	/** Remove your own, someone else's or all of a given reaction.

Requires `ManageMessages` permission. */
	message_clear_reactions_clear_reactions: {
		parameters: {
			path: {
				/** target */
				target: Id;
				/** msg */
				msg: Id;
			};
		};
		responses: {
			204: {
				/** Success */
				type: undefined;
			};
			default: {
				/** An error occurred. */
				content: {
					'application/json': Error;
				};
			};
		};
	};
	/** Creates a webhook which 3rd party platforms can use to send messages */
	webhook_create_create_webhook: {
		parameters: {
			path: {
				/** target */
				target: Id;
			};
		};
		requestBody: {
			content: {
				'application/json': CreateWebhookBody;
			};
		};
		responses: {
			200: {
				content: {
					'application/json': Webhook;
				};
			};
			default: {
				/** An error occurred. */
				content: {
					'application/json': Error;
				};
			};
		};
	};
	/** Gets all webhooks inside the channel */
	webhook_fetch_all_fetch_webhooks: {
		parameters: {
			path: {
				/** channel_id */
				channel_id: Id;
			};
		};
		responses: {
			200: {
				content: {
					'application/json': (Webhook)[];
				};
			};
			default: {
				/** An error occurred. */
				content: {
					'application/json': Error;
				};
			};
		};
	};
	/** Create a new server. */
	server_create_create_server: {
		requestBody: {
			content: {
				'application/json': DataCreateServer;
			};
		};
		responses: {
			200: {
				content: {
					'application/json': CreateServerLegacyResponse;
				};
			};
			default: {
				/** An error occurred. */
				content: {
					'application/json': Error;
				};
			};
		};
	};
	/** Fetch a server by its id. */
	server_fetch_fetch: {
		parameters: {
			path: {
				/** target */
				target: Id;
			};
			query: {
				/** Whether to include channels */
				include_channels: boolean | null;
			};
		};
		responses: {
			200: {
				content: {
					'application/json': FetchServerResponse;
				};
			};
			default: {
				/** An error occurred. */
				content: {
					'application/json': Error;
				};
			};
		};
	};
	/** Deletes a server if owner otherwise leaves. */
	server_delete_delete: {
		parameters: {
			path: {
				/** target */
				target: Id;
			};
			query: {
				/** Whether to not send a leave message */
				leave_silently: boolean | null;
			};
		};
		responses: {
			204: {
				/** Success */
				type: undefined;
			};
			default: {
				/** An error occurred. */
				content: {
					'application/json': Error;
				};
			};
		};
	};
	/** Edit a server by its id. */
	server_edit_edit: {
		parameters: {
			path: {
				/** target */
				target: Id;
			};
		};
		requestBody: {
			content: {
				'application/json': DataEditServer;
			};
		};
		responses: {
			200: {
				content: {
					'application/json': Server;
				};
			};
			default: {
				/** An error occurred. */
				content: {
					'application/json': Error;
				};
			};
		};
	};
	/** Mark all channels in a server as read. */
	server_ack_ack: {
		parameters: {
			path: {
				/** target */
				target: Id;
			};
		};
		responses: {
			204: {
				/** Success */
				type: undefined;
			};
			default: {
				/** An error occurred. */
				content: {
					'application/json': Error;
				};
			};
		};
	};
	/** Create a new Text or Voice channel. */
	channel_create_create_server_channel: {
		parameters: {
			path: {
				/** server */
				server: Id;
			};
		};
		requestBody: {
			content: {
				'application/json': DataCreateServerChannel;
			};
		};
		responses: {
			200: {
				content: {
					'application/json': Channel;
				};
			};
			default: {
				/** An error occurred. */
				content: {
					'application/json': Error;
				};
			};
		};
	};
	/** Fetch all server members. */
	member_fetch_all_fetch_all: {
		parameters: {
			path: {
				/** target */
				target: Id;
			};
			query: {
				/** Whether to exclude offline users */
				exclude_offline: boolean | null;
			};
		};
		responses: {
			200: {
				content: {
					'application/json': AllMemberResponse;
				};
			};
			default: {
				/** An error occurred. */
				content: {
					'application/json': Error;
				};
			};
		};
	};
	/** Retrieve a member. */
	member_fetch_fetch: {
		parameters: {
			path: {
				/** target */
				target: Id;
				/** member */
				member: Id;
			};
			query: {
				/** roles */
				roles: boolean | null;
			};
		};
		responses: {
			200: {
				content: {
					'application/json': MemberResponse;
				};
			};
			default: {
				/** An error occurred. */
				content: {
					'application/json': Error;
				};
			};
		};
	};
	/** Removes a member from the server. */
	member_remove_kick: {
		parameters: {
			path: {
				/** target */
				target: Id;
				/** member */
				member: Id;
			};
		};
		responses: {
			204: {
				/** Success */
				type: undefined;
			};
			default: {
				/** An error occurred. */
				content: {
					'application/json': Error;
				};
			};
		};
	};
	/** Edit a member by their id. */
	member_edit_edit: {
		parameters: {
			path: {
				/** server */
				server: Id;
				/** member */
				member: Id;
			};
		};
		requestBody: {
			content: {
				'application/json': DataMemberEdit;
			};
		};
		responses: {
			200: {
				content: {
					'application/json': Member;
				};
			};
			default: {
				/** An error occurred. */
				content: {
					'application/json': Error;
				};
			};
		};
	};
	/** Query members by a given name, this API is not stable and will be removed in the future. */
	member_experimental_query_member_experimental_query: {
		parameters: {
			path: {
				/** target */
				target: Id;
			};
			query: {
				/** String to search for */
				query: string;
				/** Discourage use of this API */
				experimental_api: boolean;
			};
		};
		responses: {
			200: {
				content: {
					'application/json': MemberQueryResponse;
				};
			};
			default: {
				/** An error occurred. */
				content: {
					'application/json': Error;
				};
			};
		};
	};
	/** Ban a user by their id. */
	ban_create_ban: {
		parameters: {
			path: {
				/** server */
				server: Id;
				/** target */
				target: Id;
			};
		};
		requestBody: {
			content: {
				'application/json': DataBanCreate;
			};
		};
		responses: {
			200: {
				content: {
					'application/json': ServerBan;
				};
			};
			default: {
				/** An error occurred. */
				content: {
					'application/json': Error;
				};
			};
		};
	};
	/** Remove a user's ban. */
	ban_remove_unban: {
		parameters: {
			path: {
				/** server */
				server: Id;
				/** target */
				target: Id;
			};
		};
		responses: {
			204: {
				/** Success */
				type: undefined;
			};
			default: {
				/** An error occurred. */
				content: {
					'application/json': Error;
				};
			};
		};
	};
	/** Fetch all bans on a server. */
	ban_list_list: {
		parameters: {
			path: {
				/** target */
				target: Id;
			};
		};
		responses: {
			200: {
				content: {
					'application/json': BanListResult;
				};
			};
			default: {
				/** An error occurred. */
				content: {
					'application/json': Error;
				};
			};
		};
	};
	/** Fetch all server invites. */
	invites_fetch_invites: {
		parameters: {
			path: {
				/** target */
				target: Id;
			};
		};
		responses: {
			200: {
				content: {
					'application/json': (Invite)[];
				};
			};
			default: {
				/** An error occurred. */
				content: {
					'application/json': Error;
				};
			};
		};
	};
	/** Creates a new server role. */
	roles_create_create: {
		parameters: {
			path: {
				/** target */
				target: Id;
			};
		};
		requestBody: {
			content: {
				'application/json': DataCreateRole;
			};
		};
		responses: {
			200: {
				content: {
					'application/json': NewRoleResponse;
				};
			};
			default: {
				/** An error occurred. */
				content: {
					'application/json': Error;
				};
			};
		};
	};
	/** Fetch a role by its id. */
	roles_fetch_fetch: {
		parameters: {
			path: {
				/** target */
				target: Id;
				/** role_id */
				role_id: string;
			};
		};
		responses: {
			200: {
				content: {
					'application/json': Role;
				};
			};
			default: {
				/** An error occurred. */
				content: {
					'application/json': Error;
				};
			};
		};
	};
	/** Delete a server role by its id. */
	roles_delete_delete: {
		parameters: {
			path: {
				/** target */
				target: Id;
				/** role_id */
				role_id: string;
			};
		};
		responses: {
			204: {
				/** Success */
				type: undefined;
			};
			default: {
				/** An error occurred. */
				content: {
					'application/json': Error;
				};
			};
		};
	};
	/** Edit a role by its id. */
	roles_edit_edit: {
		parameters: {
			path: {
				/** target */
				target: Id;
				/** role_id */
				role_id: string;
			};
		};
		requestBody: {
			content: {
				'application/json': DataEditRole;
			};
		};
		responses: {
			200: {
				content: {
					'application/json': Role;
				};
			};
			default: {
				/** An error occurred. */
				content: {
					'application/json': Error;
				};
			};
		};
	};
	/** Sets permissions for the specified role in the server. */
	permissions_set_set_role_permission: {
		parameters: {
			path: {
				/** target */
				target: Id;
				/** role_id */
				role_id: string;
			};
		};
		requestBody: {
			content: {
				'application/json': DataSetServerRolePermission;
			};
		};
		responses: {
			200: {
				content: {
					'application/json': Server;
				};
			};
			default: {
				/** An error occurred. */
				content: {
					'application/json': Error;
				};
			};
		};
	};
	/** Sets permissions for the default role in this server. */
	permissions_set_default_set_default_permissions_servers: {
		parameters: {
			path: {
				/** target */
				target: Id;
			};
		};
		requestBody: {
			content: {
				'application/json': DataPermissionsValue;
			};
		};
		responses: {
			200: {
				content: {
					'application/json': Server;
				};
			};
			default: {
				/** An error occurred. */
				content: {
					'application/json': Error;
				};
			};
		};
	};
	/** Fetch all emoji on a server. */
	emoji_list_list_emoji: {
		parameters: {
			path: {
				/** target */
				target: Id;
			};
		};
		responses: {
			200: {
				content: {
					'application/json': (Emoji)[];
				};
			};
			default: {
				/** An error occurred. */
				content: {
					'application/json': Error;
				};
			};
		};
	};
	/** Fetch an invite by its id. */
	invite_fetch_fetch: {
		parameters: {
			path: {
				/** target */
				target: Id;
			};
		};
		responses: {
			200: {
				content: {
					'application/json': InviteResponse;
				};
			};
			default: {
				/** An error occurred. */
				content: {
					'application/json': Error;
				};
			};
		};
	};
	/** Join an invite by its ID */
	invite_join_join: {
		parameters: {
			path: {
				/** target */
				target: Id;
			};
		};
		responses: {
			200: {
				content: {
					'application/json': InviteJoinResponse;
				};
			};
			default: {
				/** An error occurred. */
				content: {
					'application/json': Error;
				};
			};
		};
	};
	/** Delete an invite by its id. */
	invite_delete_delete: {
		parameters: {
			path: {
				/** target */
				target: Id;
			};
		};
		responses: {
			204: {
				/** Success */
				type: undefined;
			};
			default: {
				/** An error occurred. */
				content: {
					'application/json': Error;
				};
			};
		};
	};
	/** Create an emoji by its Autumn upload id. */
	emoji_create_create_emoji: {
		parameters: {
			path: {
				/** id */
				id: string;
			};
		};
		requestBody: {
			content: {
				'application/json': DataCreateEmoji;
			};
		};
		responses: {
			200: {
				content: {
					'application/json': Emoji;
				};
			};
			default: {
				/** An error occurred. */
				content: {
					'application/json': Error;
				};
			};
		};
	};
	/** Fetch an emoji by its id. */
	emoji_fetch_fetch_emoji: {
		parameters: {
			path: {
				/** emoji_id */
				emoji_id: Id;
			};
		};
		responses: {
			200: {
				content: {
					'application/json': Emoji;
				};
			};
			default: {
				/** An error occurred. */
				content: {
					'application/json': Error;
				};
			};
		};
	};
	/** Delete an emoji by its id. */
	emoji_delete_delete_emoji: {
		parameters: {
			path: {
				/** emoji_id */
				emoji_id: Id;
			};
		};
		responses: {
			204: {
				/** Success */
				type: undefined;
			};
			default: {
				/** An error occurred. */
				content: {
					'application/json': Error;
				};
			};
		};
	};
	/** Report a piece of content to the moderation team. */
	report_content_report_content: {
		requestBody: {
			content: {
				'application/json': DataReportContent;
			};
		};
		responses: {
			200: {
				type: undefined;
			};
			default: {
				/** An error occurred. */
				content: {
					'application/json': Error;
				};
			};
		};
	};
	/** Create a new account. */
	create_account_create_account: {
		requestBody: {
			content: {
				'application/json': DataCreateAccount;
			};
		};
		responses: {
			204: {
				/** Success */
				type: undefined;
			};
			default: {
				/** An error occurred. */
				content: {
					'application/json': Error;
				};
			};
		};
	};
	/** Resend account creation verification email. */
	resend_verification_resend_verification: {
		requestBody: {
			content: {
				'application/json': DataResendVerification;
			};
		};
		responses: {
			204: {
				/** Success */
				type: undefined;
			};
			default: {
				/** An error occurred. */
				content: {
					'application/json': Error;
				};
			};
		};
	};
	/** Schedule an account for deletion by confirming the received token. */
	confirm_deletion_confirm_deletion: {
		requestBody: {
			content: {
				'application/json': DataAccountDeletion;
			};
		};
		responses: {
			204: {
				/** Success */
				type: undefined;
			};
			default: {
				/** An error occurred. */
				content: {
					'application/json': Error;
				};
			};
		};
	};
	/** Request to have an account deleted. */
	delete_account_delete_account: {
		responses: {
			204: {
				/** Success */
				type: undefined;
			};
			default: {
				/** An error occurred. */
				content: {
					'application/json': Error;
				};
			};
		};
	};
	/** Fetch account information from the current session. */
	fetch_account_fetch_account: {
		responses: {
			200: {
				content: {
					'application/json': AccountInfo;
				};
			};
			default: {
				/** An error occurred. */
				content: {
					'application/json': Error;
				};
			};
		};
	};
	/** Disable an account. */
	disable_account_disable_account: {
		responses: {
			204: {
				/** Success */
				type: undefined;
			};
			default: {
				/** An error occurred. */
				content: {
					'application/json': Error;
				};
			};
		};
	};
	/** Change the current account password. */
	change_password_change_password: {
		requestBody: {
			content: {
				'application/json': DataChangePassword;
			};
		};
		responses: {
			204: {
				/** Success */
				type: undefined;
			};
			default: {
				/** An error occurred. */
				content: {
					'application/json': Error;
				};
			};
		};
	};
	/** Change the associated account email. */
	change_email_change_email: {
		requestBody: {
			content: {
				'application/json': DataChangeEmail;
			};
		};
		responses: {
			204: {
				/** Success */
				type: undefined;
			};
			default: {
				/** An error occurred. */
				content: {
					'application/json': Error;
				};
			};
		};
	};
	/** Verify an email address. */
	verify_email_verify_email: {
		parameters: {
			path: {
				/** code */
				code: string;
			};
		};
		responses: {
			200: {
				content: {
					'application/json': ResponseVerify;
				};
			};
			default: {
				/** An error occurred. */
				content: {
					'application/json': Error;
				};
			};
		};
	};
	/** Send an email to reset account password. */
	send_password_reset_send_password_reset: {
		requestBody: {
			content: {
				'application/json': DataSendPasswordReset;
			};
		};
		responses: {
			204: {
				/** Success */
				type: undefined;
			};
			default: {
				/** An error occurred. */
				content: {
					'application/json': Error;
				};
			};
		};
	};
	/** Confirm password reset and change the password. */
	password_reset_password_reset: {
		requestBody: {
			content: {
				'application/json': DataPasswordReset;
			};
		};
		responses: {
			204: {
				/** Success */
				type: undefined;
			};
			default: {
				/** An error occurred. */
				content: {
					'application/json': Error;
				};
			};
		};
	};
	/** Login to an account. */
	login_login: {
		requestBody: {
			content: {
				'application/json': DataLogin;
			};
		};
		responses: {
			200: {
				content: {
					'application/json': ResponseLogin;
				};
			};
			default: {
				/** An error occurred. */
				content: {
					'application/json': Error;
				};
			};
		};
	};
	/** Delete current session. */
	logout_logout: {
		responses: {
			204: {
				/** Success */
				type: undefined;
			};
			default: {
				/** An error occurred. */
				content: {
					'application/json': Error;
				};
			};
		};
	};
	/** Fetch all sessions associated with this account. */
	fetch_all_fetch_all: {
		responses: {
			200: {
				content: {
					'application/json': (SessionInfo)[];
				};
			};
			default: {
				/** An error occurred. */
				content: {
					'application/json': Error;
				};
			};
		};
	};
	/** Delete all active sessions, optionally including current one. */
	revoke_all_revoke_all: {
		parameters: {
			query: {
				/** revoke_self */
				revoke_self: boolean | null;
			};
		};
		responses: {
			204: {
				/** Success */
				type: undefined;
			};
			default: {
				/** An error occurred. */
				content: {
					'application/json': Error;
				};
			};
		};
	};
	/** Delete a specific active session. */
	revoke_revoke: {
		parameters: {
			path: {
				/** id */
				id: string;
			};
		};
		responses: {
			204: {
				/** Success */
				type: undefined;
			};
			default: {
				/** An error occurred. */
				content: {
					'application/json': Error;
				};
			};
		};
	};
	/** Edit current session information. */
	edit_edit: {
		parameters: {
			path: {
				/** id */
				id: string;
			};
		};
		requestBody: {
			content: {
				'application/json': DataEditSession;
			};
		};
		responses: {
			200: {
				content: {
					'application/json': SessionInfo;
				};
			};
			default: {
				/** An error occurred. */
				content: {
					'application/json': Error;
				};
			};
		};
	};
	/** Create a new MFA ticket or validate an existing one. */
	create_ticket_create_ticket: {
		requestBody: {
			content: {
				'application/json': MFAResponse;
			};
		};
		responses: {
			200: {
				content: {
					'application/json': MFATicket;
				};
			};
			default: {
				/** An error occurred. */
				content: {
					'application/json': Error;
				};
			};
		};
	};
	/** Fetch MFA status of an account. */
	fetch_status_fetch_status: {
		responses: {
			200: {
				content: {
					'application/json': MultiFactorStatus;
				};
			};
			default: {
				/** An error occurred. */
				content: {
					'application/json': Error;
				};
			};
		};
	};
	/** Fetch recovery codes for an account. */
	fetch_recovery_fetch_recovery: {
		responses: {
			200: {
				content: {
					'application/json': (string)[];
				};
			};
			default: {
				/** An error occurred. */
				content: {
					'application/json': Error;
				};
			};
		};
	};
	/** Re-generate recovery codes for an account. */
	generate_recovery_generate_recovery: {
		responses: {
			200: {
				content: {
					'application/json': (string)[];
				};
			};
			default: {
				/** An error occurred. */
				content: {
					'application/json': Error;
				};
			};
		};
	};
	/** Fetch available MFA methods. */
	get_mfa_methods_get_mfa_methods: {
		responses: {
			200: {
				content: {
					'application/json': (MFAMethod)[];
				};
			};
		};
	};
	/** Generate a new secret for TOTP. */
	totp_enable_totp_enable: {
		requestBody: {
			content: {
				'application/json': MFAResponse;
			};
		};
		responses: {
			204: {
				/** Success */
				type: undefined;
			};
			default: {
				/** An error occurred. */
				content: {
					'application/json': Error;
				};
			};
		};
	};
	/** Generate a new secret for TOTP. */
	totp_generate_secret_totp_generate_secret: {
		responses: {
			200: {
				content: {
					'application/json': ResponseTotpSecret;
				};
			};
			default: {
				/** An error occurred. */
				content: {
					'application/json': Error;
				};
			};
		};
	};
	/** Disable TOTP 2FA for an account. */
	totp_disable_totp_disable: {
		responses: {
			204: {
				/** Success */
				type: undefined;
			};
			default: {
				/** An error occurred. */
				content: {
					'application/json': Error;
				};
			};
		};
	};
	/** This will tell you whether the current account requires onboarding or whether you can continue to send requests as usual. You may skip calling this if you're restoring an existing session. */
	hello_hello: {
		responses: {
			200: {
				content: {
					'application/json': DataHello;
				};
			};
		};
	};
	/** This sets a new username, completes onboarding and allows a user to start using Revolt. */
	complete_complete: {
		requestBody: {
			content: {
				'application/json': DataOnboard;
			};
		};
		responses: {
			200: {
				content: {
					'application/json': User;
				};
			};
			default: {
				/** An error occurred. */
				content: {
					'application/json': Error;
				};
			};
		};
	};
	/** Accept/acknowledge changes to platform policy. */
	acknowledge_policy_changes_acknowledge_policy_changes: {
		responses: {
			200: {
				type: undefined;
			};
			default: {
				/** An error occurred. */
				content: {
					'application/json': Error;
				};
			};
		};
	};
	/** Create a new Web Push subscription.

If an existing subscription exists on this session, it will be removed. */
	subscribe_subscribe: {
		requestBody: {
			content: {
				'application/json': WebPushSubscription;
			};
		};
		responses: {
			204: {
				/** Success */
				type: undefined;
			};
			default: {
				/** An error occurred. */
				content: {
					'application/json': Error;
				};
			};
		};
	};
	/** Remove the Web Push subscription associated with the current session. */
	unsubscribe_unsubscribe: {
		responses: {
			204: {
				/** Success */
				type: undefined;
			};
			default: {
				/** An error occurred. */
				content: {
					'application/json': Error;
				};
			};
		};
	};
	/** Fetch settings from server filtered by keys.

This will return an object with the requested keys, each value is a tuple of `(timestamp, value)`, the value is the previously uploaded data. */
	get_settings_fetch: {
		requestBody: {
			content: {
				'application/json': OptionsFetchSettings;
			};
		};
		responses: {
			200: {
				content: {
					'application/json': Record<string, (number | string)[]>;
				};
			};
			default: {
				/** An error occurred. */
				content: {
					'application/json': Error;
				};
			};
		};
	};
	/** Upload data to save to settings. */
	set_settings_set: {
		parameters: {
			query: {
				/** Timestamp of settings change.

Used to avoid feedback loops. */
				timestamp: number | null;
			};
		};
		requestBody: {
			content: {
				'application/json': Record<string, string>;
			};
		};
		responses: {
			204: {
				/** Success */
				type: undefined;
			};
			default: {
				/** An error occurred. */
				content: {
					'application/json': Error;
				};
			};
		};
	};
	/** Fetch information about unread state on channels. */
	get_unreads_unreads: {
		responses: {
			200: {
				content: {
					'application/json': (ChannelUnread)[];
				};
			};
			default: {
				/** An error occurred. */
				content: {
					'application/json': Error;
				};
			};
		};
	};
}
